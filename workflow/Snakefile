from os import path

TOOLS=config["tools"]
samplename=config.get('sample', [])
rule all:
    input:
        lambda wildcards: expand("results/{sample}/{sample}_filtered.fastq.gz", sample=samplename),
        lambda wildcards: expand("results/{sample}/{sample}.kmadb.bam", sample=samplename),
        lambda wildcards: expand("results/{sample}/{sample}_rep.resf.bam", sample=samplename),
        lambda wildcards: expand("results/{sample}/Flye/assembly.fasta", sample=samplename),
        lambda wildcards: expand("results/{sample}/Medaka/consensus.fasta", sample=samplename),
        lambda wildcards: expand("results/{sample}/MapToAssemb/{sample}_assembly.bam", sample=samplename),
        lambda wildcards: expand("results/{sample}/MapToAssemb/{sample}_assembly.bam.bai", sample=samplename),
        lambda wildcards: expand("results/{sample}/Medaka/consensus.fasta.fai", sample=samplename),
        lambda wildcards: expand("results/{sample}/SCAPP/assembly_graph.confident_cycs.fasta", sample=samplename),
        lambda wildcards: expand("results/{sample}/FlyeClassify/{sample}_assembly.bam", sample=samplename),
        lambda wildcards: expand("results/{sample}/FlyeClassify/{sample}_ResF.bam", sample=samplename),
        lambda wildcards: expand("results/{sample}/AMRFinder/{sample}_amrfinder.txt", sample=samplename),
        lambda wildcards: expand("results/{sample}/DAS_Tool/DASdone", sample=samplename),
        lambda wildcards: expand("results/{sample}/genomad_output", sample=samplename),
        lambda wildcards: expand("results/{sample}/CheckM/CheckM_summary.txt", sample=samplename),
        lambda wildcards: expand("results/{sample}/GTDBtk", sample=samplename),
        lambda wildcards: expand("results/{sample}/NanoMotif/bin/new_contig_bin.tsv", sample=samplename),
        lambda wildcards: expand("results/{sample}/mobileOGdb/DASTool_proteins.mobileOG.Alignment.Out.csv", sample=samplename),
        lambda wildcards: expand("results/{sample}/GTDBtk_NM", sample=samplename),
        lambda wildcards: expand("results/{sample}/CheckM_NM", sample=samplename),
        lambda wildcards: expand("results/{sample}/MobTyper", sample=samplename),
        lambda wildcards: expand("results/{sample}/Summary/Assembly_AMRlinks.png", sample=samplename)
        

include: "rules/read_qc.smk"
include: "rules/kraken2.smk"
include: "rules/kma.smk"
include: "rules/flye.smk"
include: "rules/map_assembly.smk"
include: "rules/scapp.smk"
include: "rules/classify_assembly.smk"
include: "rules/binning.smk"
include: "rules/methylation.smk"
include: "rules/genomad.smk"
include: "rules/merge_results.smk"
include: "rules/mobileOGdb.smk"
include: "rules/mobtyper.smk"